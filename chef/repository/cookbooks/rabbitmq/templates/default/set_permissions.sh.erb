#!/bin/bash
###
# Generated by Chef for <%= node[:fqdn] %>
###

RABBITMQCTL=/usr/sbin/rabbitmqctl
EXCHANGE_DECLARER=/etc/rabbitmq/exchange-declarer.jar

if [ ! -f "$RABBITMQCTL" ]; then
    echo "Cannot find $RABBITMQCTL; exiting"
    exit 1
fi
if [ -z "$(which java 2>/dev/null)" ]; then
    echo "java is not available on the path; exiting"
    exit 1
fi

if [ "$1" == '-h' -o "$1" == '--help' ]; then
    echo "Usage: $0 [-f]"
    echo " -f - force deletion of mnesia database (reset all queues/exchanges)"
    exit 1
fi

if [ "$1" == '-f' ]; then
    echo "Deleting mnesia database if present"
    /sbin/service rabbitmq-server stop
    sleep 2
    MNESIA_DIR="/var/lib/rabbitmq/mnesia/rabbit@$(hostname -s)"
    if [ -d "$MNESIA_DIR" ]; then
        rm -rf "$MNESIA_DIR"
    fi
    /sbin/service rabbitmq-server start
    if [ $? -ne 0 ]; then
        echo "Failed to restart RabbitMQ; exiting"
        exit 1
    fi
fi

function delete_user { # name
    if [ -n "$($RABBITMQCTL list_users | grep $1)" ]; then
        $RABBITMQCTL delete_user $1
    fi
}

function add_user { #name, password
    if [ -z "$($RABBITMQCTL list_users | grep $1)" ]; then
        $RABBITMQCTL add_user $1 $2
    else
        $RABBITMQCTL change_password $1 $2
    fi
}

function set_admin { #name
    if [ -n "$($RABBITMQCTL 2>/dev/null | grep set_admin)" ]; then
        $RABBITMQCTL set_admin $1
    else
        $RABBITMQCTL set_user_tags $1 administrator
    fi
}

function add_vhost { #name
    if [ -z "$($RABBITMQCTL list_vhosts | grep $1)" ]; then
        $RABBITMQCTL add_vhost $1
    fi
}

delete_user guest

add_user flash readonly
add_user pat p0stm4n
add_user ping ping
add_user worker w0rk3r%
add_user admin f4str4bb1t

set_admin admin

$RABBITMQCTL set_permissions ping '^amq\.gen.*|ping' '^amq\.gen.*|ping' '^amq\.gen.*|ping'
$RABBITMQCTL set_permissions admin '.*' '.*' '.*'

<% @vhosts.each do |vhost| -%>
add_vhost <%= vhost %>
$RABBITMQCTL set_permissions \-p <%= vhost %> flash '^amq\.gen.*' '^amq\.gen.*' '^amq\.gen.*|player'
$RABBITMQCTL set_permissions \-p <%= vhost %> pat '^amq\.gen.*|player' '^amq\.gen.*|player' '^amq\.gen.*|player'
$RABBITMQCTL set_permissions \-p <%= vhost %> worker '^amq\.gen.*|worker' '^amq\.gen.*|worker' '^amq\.gen.*|worker'
$RABBITMQCTL set_permissions \-p <%= vhost %> admin '.*' '.*' '.*'

if [ -z "$($RABBITMQCTL list_exchanges -p <%= vhost %> | grep player-direct)" ]; then
    echo "Declaring player-direct exchange"
    java -jar $EXCHANGE_DECLARER localhost <%= vhost %> pat p0stm4n player-direct
fi

    <%
    queue_names = ('A'..'Z').to_a
    @ha_queues.each do |queue| %>
$RABBITMQCTL set_policy -p <%= vhost %> 'ha-policy-<%= queue_names.shift %>' '<%= queue %>' <% if @ha_sync_count == 'all' %>'{"ha-mode":"all"}'<%  else %>'{"ha-mode":"exactly","ha-params":<%= @ha_sync_count %>","ha-sync-mode":"<%= @ha_sync_type %>"}'<% end %>
    <% end %>
<% end =%>
