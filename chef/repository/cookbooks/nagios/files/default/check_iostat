#!/bin/sh
#
# Version 0.0.2 - Jan/2009
# Changes: added device verification
#
# by Thiago Varela - thiago@iplenix.com
# Enhanced by Richard Heade - rheade@signtechno.co.uk to include extended statistics

iostat=`which iostat 2>/dev/null`
bc=`which bc 2>/dev/null`

function help {
echo -e "\n\tThis plugin shows the I/O usage of the specified disk, using the iostat external program.\n\tIt prints three statistics: Transactions per second (tps), Kilobytes per second\n\tread from the disk (KB_read/s) and and written to the disk (KB_written/s)\n\n$0:\n\t-d <disk>\t\t\t\tDevice to be checked (without the full path, eg. sda)\n\t-c <tps>,<read>,<wrtn>,<queue>,<util>\tSets the CRITICAL level for tps, KB_read/s, KB_written/s, Queue length and %Utilisation\n\t-w <tps>,<read>,<wrtn>,<queue>,<util>\tSets the WARNING level for tps, KB_read/s and KB_written/s, Queue length and %Utilisation\n"
        exit -1
}

# Ensuring we have the needed tools:
( [ ! -f $iostat ] || [ ! -f $bc ] ) && \
        ( echo "ERROR: You must have iostat and bc installed in order to run this plugin" && exit -1 )

# Getting parameters:
while getopts "d:w:c:h" OPT; do
        case $OPT in
                "d") disk=$OPTARG;;
                "w") warning=$OPTARG;;
                "c") critical=$OPTARG;;
                "h") help;;
        esac
done

# Adjusting the three warn and crit levels:
crit_tps=`echo $critical | cut -d, -f1`
crit_read=`echo $critical | cut -d, -f2`
crit_written=`echo $critical | cut -d, -f3`
crit_queue=`echo $critical | cut -d, -f4`
crit_util=`echo $critical | cut -d, -f5`

warn_tps=`echo $warning | cut -d, -f1`
warn_read=`echo $warning | cut -d, -f2`
warn_written=`echo $warning | cut -d, -f3`
warn_queue=`echo $warning | cut -d, -f4`
warn_util=`echo $warning | cut -d, -f5`

# Checking parameters:
[ ! -b "/dev/$disk" ] && echo "ERROR: Device incorrectly specified" && help

( [ "$warn_tps" == "" ] || [ "$warn_read" == "" ] || [ "$warn_written" == "" ] || [ "$warn_queue" == "" ] || [ "$warn_util" == "" ] || \
  [ "$crit_tps" == "" ] || [ "$crit_read" == "" ] || [ "$crit_written" == "" ] || [ "$crit_queue" == "" ] || [ "$crit_util" == "" ] ) &&
        echo "ERROR: You must specify all warning and critical levels" && help

( [[ "$warn_tps" -ge  "$crit_tps" ]] || \
  [[ "$warn_read" -ge  "$crit_read" ]] || \
  [[ "$warn_written" -ge  "$crit_written" ]] || \
  [[ "$warn_queue" -ge  "$crit_queue" ]] || \
  [[ "$warn_util" -ge  "$crit_util" ]] ) && \
  echo "ERROR: critical levels must be highter than warning levels" && help


# Doing the actual check:
$iostat $disk -dk 10 2 > /tmp/siostat$disk &
$iostat $disk -dx 10 2 > /tmp/xiostat$disk &
wait
siostat=`cat /tmp/siostat$disk | grep $disk | tail -n 1`
xiostat=`cat /tmp/xiostat$disk | grep $disk | tail -n 1`

tps=`echo $siostat | awk '{print $2}'`
kbread=`echo $siostat | awk '{print $3}'`
kbwritten=`echo $siostat | awk '{print $4}'`
queue=`echo $xiostat | awk '{print $9}'`
util=`echo $xiostat | awk '{print $12}'`

# Comparing the result and setting the correct level:
if ( [ "`echo "$tps >= $crit_tps" | bc`" == "1" ] || [ "`echo "$kbread >= $crit_read" | bc`" == "1" ] || \
     [ "`echo "$kbwritten >= $crit_written" | bc`" == "1" ] || [ "`echo "$queue >= $crit_queue" | bc`" == "1" ] || \
     [ "`echo "$util >= $crit_util" | bc`" == "1" ] ); then
        msg="CRITICAL"
        status=2
else if ( [ "`echo "$tps >= $warn_tps" | bc`" == "1" ] || [ "`echo "$kbread >= $warn_read" | bc`" == "1" ] || \
          [ "`echo "$kbwritten >= $warn_written" | bc`" == "1" ] || [ "`echo "$queue >= $warn_queue" | bc`" == "1" ] || \
          [ "`echo "$util >= $warn_util" | bc`" == "1" ] ); then
                msg="WARNING"
                status=1
     else
        msg="OK"
        status=0
     fi
fi

# Printing the results:
echo "$msg - I/O stats tps=$tps KB_read/s=$kbread KB_written/s=$kbwritten queue=$queue %util=$util | 'tps'=$tps; 'KB_read/s'=$kbread; 'KB_written/s'=$kbwritten; 'Queue'=$queue; '%Util'=$util%"

# Bye!
exit $status

