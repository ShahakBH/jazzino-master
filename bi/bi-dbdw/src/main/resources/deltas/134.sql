CREATE TABLE IF NOT EXISTS `rpt_invites_by_player_and_day` (
  PLAYER_ID bigint(21) NOT NULL,
  CREATION_DATE date DEFAULT NULL,
  AUDIT_DATE date DEFAULT NULL,
  SOURCE varchar(255) NOT NULL,
  TOTAL_SENT int(11) NOT NULL DEFAULT 0,
  D1_ACCEPTED int(11) NOT NULL DEFAULT 0,
  D3_ACCEPTED int(11) NOT NULL DEFAULT 0,
  D7_ACCEPTED int(11) NOT NULL DEFAULT 0,
  TOTAL_ACCEPTED int(11) NOT NULL DEFAULT 0,
  PRIMARY KEY (PLAYER_ID,AUDIT_DATE),
  KEY CREATION_DATE (CREATION_DATE),
  KEY SOURCE (SOURCE),
  KEY TOTAL_ACCEPTED (TOTAL_ACCEPTED),
  KEY D1_ACCEPTED (D1_ACCEPTED),
  KEY D3_ACCEPTED (D3_ACCEPTED),
  KEY D7_ACCEPTED (D7_ACCEPTED)
)#

DROP PROCEDURE IF EXISTS count_accepted_invite#
CREATE PROCEDURE count_accepted_invite(IN player_id_val bigint(21), IN accepted_date DATE, IN created_date DATE)
BEGIN
	UPDATE rpt_invites_by_player_and_day SET 
		TOTAL_ACCEPTED = TOTAL_ACCEPTED + 1,
		D1_ACCEPTED = IF(to_days(accepted_date) - to_days(CREATION_DATE) <= 1, D1_ACCEPTED + 1, D1_ACCEPTED),
		D3_ACCEPTED = IF(to_days(accepted_date) - to_days(CREATION_DATE) <= 3, D3_ACCEPTED + 1, D3_ACCEPTED),
		D7_ACCEPTED = IF(to_days(accepted_date) - to_days(CREATION_DATE) <= 7, D7_ACCEPTED + 1, D7_ACCEPTED)
		WHERE PLAYER_ID = player_id_val AND AUDIT_DATE = created_date;
END#

DROP TRIGGER IF EXISTS player_definition_trigger#
CREATE TRIGGER player_definition_trigger
AFTER INSERT ON PLAYER_DEFINITION
FOR EACH ROW
BEGIN
	DECLARE source_val varchar(255);
	SELECT 
		CASE WHEN a.AD_CODE IS NULL THEN (CASE WHEN l.REFERRAL_ID IS NULL THEN 'Natural' ELSE 'Invited' END) ELSE a.AD_CODE END AS SOURCE
		INTO source_val
		FROM strataproddw.LOBBY_USER l
		LEFT JOIN AD_TRACKING a USING(USER_ID)
		WHERE l.PLAYER_ID = NEW.PLAYER_ID;

	INSERT IGNORE INTO rpt_account_sources_mv(ACCOUNT_ID,SOURCE,TSCREATED)
		VALUES(NEW.ACCOUNT_ID,source_val,NEW.TSCREATED);
		
	INSERT IGNORE INTO rpt_invites_by_player_and_day(PLAYER_ID,SOURCE,AUDIT_DATE,CREATION_DATE,TOTAL_SENT)
		VALUES(NEW.PLAYER_ID,source_val,NEW.TSCREATED,NEW.TSCREATED,0);
END
#

DROP TRIGGER IF EXISTS ad_tracking_trigger#
CREATE TRIGGER ad_tracking_trigger
AFTER INSERT ON AD_TRACKING
FOR EACH ROW
BEGIN
	DECLARE account_id_val bigint(21) DEFAULT NULL;
	DECLARE player_id_val bigint(21) DEFAULT NULL;
	
	SELECT p.ACCOUNT_ID,p.PLAYER_ID INTO account_id_val,player_id_val
		FROM LOBBY_USER lu
		JOIN PLAYER_DEFINITION p USING(PLAYER_ID)
		WHERE lu.USER_ID = NEW.USER_ID;

	IF NOT account_id_val IS NULL THEN
		REPLACE INTO rpt_account_sources_mv(ACCOUNT_ID,SOURCE,TSCREATED)
			VALUES(account_id_val,NEW.AD_CODE,NEW.REGISTRATION_TS);
			
		UPDATE rpt_invites_by_player_and_day SET SOURCE = NEW.AD_CODE WHERE PLAYER_ID = player_id_val;
	END IF;
END
#

DROP TRIGGER IF EXISTS invites_by_player_trigger#
CREATE TRIGGER invites_by_player_trigger
AFTER INSERT ON INVITATIONS
FOR EACH ROW
BEGIN
	DECLARE source_val varchar(255) DEFAULT '';
	DECLARE creation_date_val date DEFAULT NULL;
	
	SELECT s.SOURCE,DATE(p.TSCREATED) 
		into source_val,creation_date_val
		FROM PLAYER_DEFINITION p
		LEFT JOIN rpt_account_sources_mv s USING (ACCOUNT_ID)
		WHERE p.PLAYER_ID = NEW.PLAYER_ID;
	
	INSERT INTO rpt_invites_by_player_and_day(PLAYER_ID,SOURCE,AUDIT_DATE,CREATION_DATE,TOTAL_SENT)
		VALUES(NEW.PLAYER_ID,source_val,DATE(NEW.CREATED_TS),creation_date_val,1)
	ON DUPLICATE KEY UPDATE TOTAL_SENT = TOTAL_SENT + 1;
		
	IF NEW.STATUS = 'ACCEPTED' THEN
		CALL count_accepted_invite(NEW.PLAYER_ID,DATE(NEW.CREATED_TS),DATE(NEW.CREATED_TS));
	END IF;
END
#

DROP TRIGGER IF EXISTS invites_by_player_update_trigger#
CREATE TRIGGER invites_by_player_update_trigger
AFTER UPDATE ON INVITATIONS
FOR EACH ROW
BEGIN
	IF OLD.STATUS<>'ACCEPTED' AND NEW.STATUS = 'ACCEPTED' AND NOT (NEW.UPDATED_TS IS NULL) THEN
		CALL count_accepted_invite(NEW.PLAYER_ID,DATE(NEW.UPDATED_TS),DATE(NEW.CREATED_TS));
	END IF;
END
#

