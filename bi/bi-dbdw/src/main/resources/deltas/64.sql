DROP TABLE IF EXISTS rpt_activity_by_account_id#

create table rpt_activity_by_account_id (
  ACCOUNT_ID bigint(20) not null,
  AUDIT_DATE date not null,
  GAME_TYPE varchar(255),
  primary key (ACCOUNT_ID, AUDIT_DATE, GAME_TYPE),
  key IDX_AUDIT_DATE (AUDIT_DATE)
) ENGINE=InnoDB DEFAULT CHARSET=utf8#

CREATE TABLE IF NOT EXISTS PLAYER_ACCOUNT_INFO (
  ACCOUNT_ID INT(11) NOT NULL ,
  REGISTRATION_PLATFORM VARCHAR(32) NULL ,
  REGISTRATION_GAME VARCHAR(64) NULL ,
  FIRST_PURCHASE DATETIME NULL ,
  PRIMARY KEY (ACCOUNT_ID) ,
  INDEX PLATFORM_KEY (REGISTRATION_PLATFORM ASC) )#
  
DROP PROCEDURE IF EXISTS account_inserts#
CREATE PROCEDURE account_inserts(IN account_id_val INT(11), IN tsstarted_val DATETIME, IN platform_val VARCHAR(64))
BEGIN
  INSERT INTO PLAYER_ACCOUNT_INFO(ACCOUNT_ID, REGISTRATION_PLATFORM)
      VALUES (account_id_val,platform_val)
      ON DUPLICATE KEY
      UPDATE REGISTRATION_PLATFORM = 
        IF(REGISTRATION_PLATFORM IS NULL,VALUES(REGISTRATION_PLATFORM),REGISTRATION_PLATFORM);
        
    INSERT IGNORE INTO rpt_activity_by_account_id(account_id, audit_date, game_type)
      VALUES(account_id_val,DATE(tsstarted_val),'');
END
#

DROP TRIGGER IF EXISTS account_actions#
CREATE TRIGGER account_actions
AFTER INSERT ON ACCOUNT_SESSION
FOR EACH ROW
BEGIN
  DECLARE player_id_val BIGINT(20) DEFAULT 0;

  CALL account_inserts(NEW.ACCOUNT_ID,NEW.TSSTARTED,NEW.PLATFORM);
END
#

INSERT INTO PLAYER_ACCOUNT_INFO(ACCOUNT_ID,REGISTRATION_PLATFORM,FIRST_PURCHASE)
SELECT p.ACCOUNT_ID,pi.REGISTRATION_PLATFORM,pi.FIRST_PURCHASE 
FROM PLAYER_INFO pi JOIN strataprod.PLAYER p ON p.PLAYER_ID=pi.PLAYER_ID#

DROP TABLE PLAYER_INFO#

CREATE OR REPLACE VIEW PLAYER_INFO AS
SELECT p.PLAYER_ID AS PLAYER_ID,pi.REGISTRATION_PLATFORM AS REGISTRATION_PLATFORM,
  pi.REGISTRATION_GAME AS REGISTRATION_GAME,pi.FIRST_PURCHASE AS FIRST_PURCHASE
FROM PLAYER_ACCOUNT_INFO pi LEFT JOIN strataprod.PLAYER p ON p.ACCOUNT_ID=pi.ACCOUNT_ID#

DROP PROCEDURE IF EXISTS scanAccountSessions#
CREATE PROCEDURE scanAccountSessions(IN min_session BIGINT(20),IN max_session BIGINT(20))
BEGIN
  DECLARE ok INT DEFAULT 0;
  DECLARE account_id_val INT(11);
  DECLARE tsstarted_val DATETIME;
  DECLARE platform_val VARCHAR(64); 
  DECLARE session_cursor CURSOR FOR
    SELECT 
      a.ACCOUNT_ID,a.TSSTARTED,a.PLATFORM
    FROM ACCOUNT_SESSION a
    WHERE a.SESSION_ID > min_session AND a.SESSION_ID < max_session
    ORDER BY a.TSSTARTED;
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET ok = 1;
  OPEN session_cursor;
  session_loop: LOOP
    FETCH session_cursor INTO account_id_val, tsstarted_val, platform_val;
    IF ok THEN LEAVE session_loop; END IF;

    CALL account_inserts(account_id_val,tsstarted_val,platform_val);
  END LOOP session_loop;  
END
#
